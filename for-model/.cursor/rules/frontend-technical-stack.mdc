---
alwaysApply: false
---
Vue3 Frontend 코드를 생성할 때는 아래의 프레임워크, 기술, 라이브러리 및 아키텍처 패턴, 설계 방법론을 엄격히 준수해 주세요.

Core Framework
1. Vue 3.4+ 기반 애플리케이션 프레임워크 (Composition API 사용)
2. TypeScript 5.0+ 타입 시스템 적용
3. Vite 5.0+ 빌드 도구 사용

Key Technologies
1. 상태 관리: Pinia (Vue 3 공식 상태 관리 라이브러리)
2. 라우팅: Vue Router 4.0+
3. HTTP 클라이언트: Axios 또는 Fetch API
4. UI 컴포넌트 라이브러리: Vuetify 3 또는 Element Plus
5. 폼 유효성 검사: VeeValidate 4.0+
6. 날짜 처리: Day.js
7. 아이콘: @mdi/js (Material Design Icons)

개발 도구 및 유틸리티
1. ESLint + Prettier (코드 품질 및 포맷팅)
2. Husky (Git Hooks)
3. Sass/SCSS (CSS 전처리기)
4. Auto-import (자동 import 설정)

Testing Methodology
1. Vitest 기반 단위 테스트 구현
   - Given-When-Then 패턴 준수
   - Given: 테스트 데이터 및 사전 조건 설정
   - When: 테스트할 액션 또는 메서드
   - Then: 예상 결과 검증
2. Vue Test Utils를 활용한 컴포넌트 테스트
   - 컴포넌트 마운팅 및 프로퍼티 테스트
   - 이벤트 발생 및 상태 변화 테스트
   - 모킹을 통한 의존성 격리

이벤트 처리 및 통신
1. Frontend-Backend 통신: RESTful API
   - Axios 인터셉터를 통한 요청/응답 처리
   - 에러 핸들링 및 로딩 상태 관리
2. 실시간 통신: WebSocket 또는 Server-Sent Events (필요시)
3. 컴포넌트 간 통신:
   - Props/Emit을 통한 부모-자식 통신
   - Provide/Inject을 통한 의존성 주입
   - Pinia 스토어를 통한 전역 상태 관리

아키텍처 패턴 및 설계 방법론
1. Component-Based Architecture
   - 재사용 가능한 컴포넌트 설계
   - Atomic Design 패턴 적용 (Atoms, Molecules, Organisms, Templates, Pages)
   - 컴포넌트 분리 원칙 (단일 책임 원칙)
2. Layered Architecture
   - Presentation Layer (Components, Pages)
   - Business Logic Layer (Composables, Stores)
   - Data Access Layer (API Services)
3. MVVM 패턴
   - Model: Pinia 스토어 및 API 모델
   - View: Vue 컴포넌트 템플릿
   - ViewModel: Composition API 로직
4. Micro Frontend 고려사항
   - 모듈 페더레이션 지원 가능한 구조
   - 독립적인 배포 가능한 컴포넌트 구조

코딩 컨벤션
1. TypeScript 인터페이스 및 타입 정의 필수
2. Composition API 우선 사용
3. script setup 문법 사용
4. 컴포넌트명은 PascalCase
5. 파일명은 kebab-case
6. 반응형 변수는 ref, reactive 명확히 구분

