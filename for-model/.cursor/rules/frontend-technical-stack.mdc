---
alwaysApply: false
---
Vue3 Frontend 코드를 생성할 때는 아래의 프레임워크, 기술, 라이브러리 및 아키텍처 패턴, 설계 방법론을 엄격히 준수해 주세요.

Core Framework (최소 필수)
1. Node 18 Version 사용
2. Vue 3.4+ 기반 애플리케이션 프레임워크 (Composition API 사용)

Key Technologies (최소 필수)
1. 라우팅: Vue Router 4.0+
2. HTTP 클라이언트: Fetch API (또는 Axios)
3. 상태 관리: Vue3 내장 Composition API (reactive, ref, provide/inject)

선택적 기술 스택 (프로젝트 규모에 따라)
1. UI 컴포넌트 라이브러리: Vuetify 3 또는 Element Plus
2. 날짜 처리: Day.js (날짜 처리가 많은 경우)
3. 아이콘: @mdi/js (Material Design Icons)

개발 도구 및 유틸리티 (권장)
1. ESLint + Prettier (코드 품질 및 포맷팅)
2. Sass/SCSS (CSS 전처리기) - 선택사항

이벤트 처리 및 통신 (최소화)
1. Frontend-Backend 통신: RESTful API
   - Fetch API를 통한 요청/응답 처리
   - 기본 에러 핸들링 및 로딩 상태 관리
2. 컴포넌트 간 통신:
   - Props/Emit을 통한 부모-자식 통신
   - Provide/Inject을 통한 전역 상태 공유
   - reactive/ref를 통한 간단한 상태 관리

아키텍처 패턴 및 설계 방법론 (단순화)
1. Component-Based Architecture
   - 재사용 가능한 컴포넌트 설계
   - 컴포넌트 분리 원칙 (단일 책임 원칙)
2. Simple Layered Architecture
   - Presentation Layer (Components, Pages)
   - Business Logic Layer (Composables)
   - Data Access Layer (API Services)
3. MVVM 패턴 (Vue3 기본)
   - Model: reactive 데이터 및 API 모델
   - View: Vue 컴포넌트 템플릿
   - ViewModel: Composition API 로직

코딩 컨벤션 (최소화)
1. Composition API 우선 사용
2. script setup 문법 사용
3. 컴포넌트명은 PascalCase
4. 파일명은 kebab-case
5. 반응형 변수는 ref, reactive 명확히 구분
6. JavaScript 기본 사용 (TypeScript는 선택사항)


5. 파일명은 kebab-case
6. 반응형 변수는 ref, reactive 명확히 구분

