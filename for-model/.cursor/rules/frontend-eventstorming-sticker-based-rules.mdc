---
alwaysApply: false
---
UI에 대한 흐름 및 요구사항은 `@frontend-ui-requirments`를 참고해야합니다.

## Command

1. 참조 메타데이터
Command는 'commands' 메타데이터를 사용하며, UI에서 버튼 형태로 구현됩니다. 각 Command는 사용자 액션을 트리거하는 버튼 컴포넌트로 생성됩니다.

2. 생성되는 파일
CommandButton.vue
파일명: Command 스티커 이름 + Button.vue
구조:
- 버튼 UI 컴포넌트
- 클릭 이벤트 핸들러
- API 호출 로직 (Composables 활용)
- 로딩 상태 및 에러 처리
- 버튼 스타일링 (Vuetify/Element Plus 기반)

CommandComposable.ts
파일명: Command 스티커 이름 + Command.composable.ts
구조:
- API 호출 함수
- 상태 관리 (로딩, 에러, 성공)
- 폼 데이터 유효성 검사 (VeeValidate 활용)

3. 버튼 생성 규칙
Backend JPA Repository 기반 기본 CUD 버튼 생성:
- Create Button: 새로운 데이터 생성을 위한 버튼 (POST /{aggregate.namePlural})
- Update Button: 기존 데이터 수정을 위한 버튼 (PUT /{aggregate.namePlural}/{id})
- Delete Button: 데이터 삭제를 위한 버튼 (DELETE /{aggregate.namePlural}/{id})

api.openapi.yaml 파일을 참고하여 axios호출로 진행 및 UI 구성

Command 메타데이터 기반 추가 버튼 생성:
- isRestRepository 데이터를 확인하여 버튼 생성 여부 결정
- isRestRepository가 true가 아닌 경우에만 controllerInfo를 참조하여 추가 버튼 생성
- controllerInfo의 endpoint와 method 정보를 활용하여 커스텀 버튼 생성
- 커스텀 버튼 endpoint: /{aggregate.namePlural}/{controllerInfo.apiPath}

버튼 생성 로직:
```typescript
// 기본 CUD 버튼은 항상 생성
const defaultButtons = ['Create', 'Update', 'Delete'];

// Command 메타데이터 확인
commands.forEach(command => {
  if (command.isRestRepository !== true) {
    // controllerInfo를 활용한 커스텀 버튼 생성
    const customButton = {
      name: command.name,
      endpoint: `/${aggregate.namePlural}/${command.controllerInfo.apiPath}`,
      method: command.controllerInfo.method,
      description: command.description
    };
    // 커스텀 버튼 컴포넌트 생성
  }
});
```

생성되는 버튼 컴포넌트 구조:
- 기본 CUD 버튼: 표준 REST API 엔드포인트 사용 (/{aggregate.namePlural})
- 커스텀 버튼: aggregate.namePlural과 controllerInfo.apiPath를 조합한 엔드포인트 사용 (/{aggregate.namePlural}/{controllerInfo.apiPath})
- 각 버튼별 독립적인 로딩 상태 및 에러 처리
- 버튼 활성화/비활성화 조건 설정

4. Create/Update 버튼 다이얼로그 처리
Create(C)와 Update(U) 버튼 클릭 시 다이얼로그 모달 생성:

다이얼로그 내부 필드 구성 규칙:
- 기본 CU 버튼의 경우: Aggregate의 속성값들(fieldDescriptors)을 다이얼로그 내부 field로 구성
- isRestRepository가 true가 아닌 Command의 경우: Command 내부 fieldDescriptors에 정의된 속성을 다이얼로그 내부 field로 구성

다이얼로그 생성 로직:
```typescript
// Create/Update 버튼 클릭 시 다이얼로그 생성
const openDialog = (buttonType: 'create' | 'update', command?: Command) => {
  let dialogFields = [];
  
  if (command && command.isRestRepository !== true) {
    // Command의 fieldDescriptors 사용
    dialogFields = command.fieldDescriptors || [];
  } else {
    // Aggregate의 fieldDescriptors 사용 (기본 CU)
    dialogFields = aggregate.fieldDescriptors || [];
  }
  
  // 다이얼로그 모달 생성 및 필드 렌더링
  createFormDialog({
    title: buttonType === 'create' ? `Create ${aggregate.name}` : `Update ${aggregate.name}`,
    fields: dialogFields,
    onSubmit: (formData) => handleSubmit(buttonType, formData, command)
  });
};
```

다이얼로그 컴포넌트 구조:
- Modal/Dialog 컴포넌트 (Vuetify/Element Plus 기반)
- 동적 폼 필드 생성 (fieldDescriptors 기반)
- VeeValidate를 활용한 폼 유효성 검사
- 제출/취소 버튼
- 로딩 상태 및 에러 메시지 표시


## Aggregate

1. 참조 메타데이터
Aggregate는 'aggregates' 메타데이터를 기반으로 List 형태의 컴포넌트로 생성됩니다. fieldDescriptors를 활용하여 속성들을 표시하며, 관계형 데이터 (Enumeration, ValueObject, Entity)를 테이블이나 카드 형태로 구성합니다.

2. 생성되는 파일
AggregateList.vue
파일명: Aggregate이름 + List.vue
구조:
- 데이터 테이블/카드 리스트 컴포넌트
- fieldDescriptors 기반 컬럼/필드 구성
- 검색, 필터링, 정렬 기능
- 페이지네이션
- CRUD 액션 버튼들
- 상세보기 모달/라우터 연동

AggregateStore.ts
파일명: Aggregate이름 + Store.ts
구조:
- Pinia 스토어 정의
- Aggregate 데이터 상태 관리
- API 호출 액션들
- 게터 함수들

## BoundedContext 및 메인페이지 구성

1. 메인페이지 구성
메인페이지가 기본으로 생성되며, 전체 시스템의 진입점 역할을 합니다.

MainDashboard.vue
구조:
- BoundedContext별 카드/타일 UI 생성
- 각 BoundedContext 카드 클릭 시 해당 Aggregate 목록 페이지로 라우팅
- 전체 시스템 개요 및 주요 지표
- 최근 활동 피드
- 검색 기능

BoundedContext 카드 생성 로직:
```typescript
// 메타데이터 기반 BoundedContext 카드들 동적 생성
const generateBoundedContexts = (boundedContextsMetadata) => {
  return Object.keys(boundedContextsMetadata).map(contextKey => {
    const contextAggregates = boundedContextsMetadata[contextKey].aggregates || [];
    return {
      name: contextKey,
      path: `/${contextKey.toLowerCase()}`,
      aggregates: contextAggregates.map(aggregate => ({
        name: aggregate.name,
        namePlural: aggregate.namePlural,
        displayName: aggregate.displayName || aggregate.name
      }))
    };
  });
};

// 사용 예시
const boundedContexts = generateBoundedContexts(metaData.boundedContexts);

// 각 BoundedContext 카드 컴포넌트
const BoundedContextCard = {
  props: ['contextName', 'contextPath', 'aggregates'],
  template: `
    <div class="context-card" @click="navigateToContext">
      <h3>{{ contextName }}</h3>
      <p>{{ aggregates.length }} Aggregates</p>
      <ul>
        <li v-for="aggregate in aggregates" :key="aggregate.name">
          {{ aggregate.displayName }}
        </li>
      </ul>
    </div>
  `,
  methods: {
    navigateToContext() {
      this.$router.push(\`\${this.contextPath}/\${this.aggregates[0]?.namePlural || ''}\`);
    }
  }
};
```

2. BoundedContext별 서브메뉴
각 BoundedContext는 독립적인 서브메뉴로 구성되며, 해당 컨텍스트의 Aggregate List 컴포넌트들을 포함합니다.

SubMenu.vue
구조:
- Vue Router 기반 네비게이션
- BoundedContext별 메뉴 그룹핑
- 아코디언 또는 탭 형태의 메뉴
- 메인페이지로 돌아가기 버튼

3. 라우팅 구조
메타데이터 기반 동적 라우팅 구성:

```typescript
// 메타데이터 기반 동적 라우터 설정
const generateRoutes = (boundedContextsMetadata) => {
  const routes = [
    { path: '/', component: MainDashboard }
  ];

  // BoundedContext별 동적 라우트 생성
  Object.keys(boundedContextsMetadata).forEach(contextKey => {
    const contextPath = contextKey.toLowerCase();
    const contextAggregates = boundedContextsMetadata[contextKey].aggregates || [];
    
    contextAggregates.forEach(aggregate => {
      const aggregatePath = aggregate.namePlural.toLowerCase();
      routes.push(
        { path: \`/\${contextPath}/\${aggregatePath}\`, component: AggregateListView, 
          props: { boundedContext: contextKey, aggregate: aggregate.name } },
        { path: \`/\${contextPath}/\${aggregatePath}/:id\`, component: AggregateDetailView,
          props: { boundedContext: contextKey, aggregate: aggregate.name } }
      );
    });
  });

  return routes;
};

// BoundedContext 카드 클릭 시 네비게이션
const navigateToBoundedContext = (contextName: string, aggregates: any[]) => {
  if (aggregates.length > 0) {
    const firstAggregate = aggregates[0];
    router.push(\`/\${contextName.toLowerCase()}/\${firstAggregate.namePlural.toLowerCase()}\`);
  }
};
```

메인페이지 카드 UI 구성:
- 메타데이터 기반 BoundedContext명 동적 표시 (contextKey 활용)
- 해당 컨텍스트 내 Aggregate 개수 동적 표시
- Aggregate 목록 미리보기 (aggregate.displayName 또는 aggregate.name 활용)
- 클릭 시 첫 번째 Aggregate의 namePlural 기반 List 페이지로 이동
- PRD 변경 시 자동으로 반영되는 범용적 구조
- When parameters from views or ReadModels exist, write query statements referencing queryOption