forEach: Model
fileName: openapi.yaml
ifDuplicated: merge
---

openapi: 3.1.0
info:
  title: {{options.package}} API
  version: 0.0.1
  description: API definition of {{options.package}}
  contact:
    name: creator's name
    url: http://creator.homepage.address
    email: creator@creator.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
{{#boundedContexts}}
{{#if aggregates}}
{{#aggregates}}
  /{{namePlural}}:
    summary: Global operations on {{namePlural}}
    get:
      tags:
      - {{namePlural}}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/{{namePascalCase}}'
              examples:
                value:
          description: Get list of {{namePlural}}
      operationId: Get{{namePascalCase}}
      summary: Get list of {{namePlural}}
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{namePascalCase}}'
            {{#if commands.examples}}
            {{#commands.examples}}
            examples:
            {{#when}}
              value:
                {{#each value}}
                  {{@key}}: {{this}}
                {{/each}}
            {{/when}}
            {{/commands.examples}}
            {{/if}}
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{namePascalCase}}'
              {{#if commands.examples}}
              {{#commands.examples}}
              examples:
              {{#then}}
                value:
                  {{#each value}}
                    {{@key}}: {{this}}
                  {{/each}}
              {{/then}}
              {{/commands.examples}}
              {{/if}}
          description: Changed {{namePascalCase}}
      operationId: Post {{namePascalCase}}
      summary: Post {{namePascalCase}}        
  /{{namePlural}}/{id}:
    summary: Specific operation on {{namePlural}}
    get:
      parameters:
      - examples:
          {{aggregateRoot.keyFieldDescriptor.className}}:
            value: {{aggregateRoot.keyFieldDescriptor.className}}
        name: id
        description: {{namePascalCase}} name
        schema:
          type: {{aggregateRoot.keyFieldDescriptor.className}}
        in: path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{namePascalCase}}'
              examples:
                value:
                  {{#aggregateRoot.fieldDescriptors}}
                    {{name}}: {{map @root.contexts.examples className}}
                  {{/aggregateRoot.fieldDescriptors}}
          description: {{namePlural}} with specified id
      operationId: Get{{namePascalCase}}ById
      summary: Get {{namePascalCase}} by id
      description: Get {{namePascalCase}} by id
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{namePascalCase}}'
            {{#if commands.examples}}
            {{#commands.examples}}
            examples:
            {{#when}}
              1:
                value:
                {{#each value}}
                  {{@key}}: {{this}}
                {{/each}}
            {{/when}}
            {{/commands.examples}}
            {{/if}}
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{namePascalCase}}'
              {{#if commands.examples}}
              {{#commands.examples}}
              examples:
              {{#then}}
                1:
                  value:
                  {{#each value}}
                    {{@key}}: {{this}}
                  {{/each}}
              {{/then}}
              {{/commands.examples}}
              {{/if}}
          description: Changed {{namePascalCase}}
      operationId: Patch{{namePascalCase}}
      summary: Patch existing {{namePascalCase}}
    parameters:
    - name: id
      description: {{namePascalCase}} id
      schema:
        type: {{map @root.contexts.mappings aggregateRoot.keyFieldDescriptor.className}}
      in: path
      required: true
{{/aggregates}}
{{/if}}
{{/boundedContexts}}


<function>

    this.contexts.mappings = [
      {
        "if":['Double', 'double', 'BigDecimal', 'float'],
        "then":'number'
      },
      {
        "if":['Integer', 'integer', 'Long', 'long'],
        "then": 'integer'
      },
      {
        "if":['String'],
        "then": 'string'
      },
      {
        "default": 'string'
      }
    ]

    this.contexts.examples = [
      {
        "if":['Double', 'double', 'BigDecimal', 'float'],
        "then":1.1
      },
      {
        "if":['Integer', 'integer', 'Long', 'long'],
        "then": 1
      },
      {
        "if":['String'],
        "then": 'A string'
      },
      {
        "default": 'value'
      }
    ]

</function>